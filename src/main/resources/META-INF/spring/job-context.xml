<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

	<batch:job id="simpleServiceJob">
		<batch:step id="simpleServiceJob.step0">
			<batch:tasklet>
				<bean class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter">
					<property name="targetObject">
						<bean class="java.lang.String">
							<constructor-arg value="hello world"/>
						</bean>		
					</property>
					<property name="targetMethod" value="length"/>
				</bean>				
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<!-- job to pick up from a database and process in a large batch  (end of day transactions to resolution) -->
	<batch:job id="partitionedJob">
		<batch:step id="partitionedJob.step1" next="partitionedJob.step2">
			<batch:tasklet>
				<bean class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter">
					<property name="targetObject" ref="databaseInitiationService"/>
					<property name="targetMethod" value="setupService"/>
				</bean>				
			</batch:tasklet>
		</batch:step>
		<!-- i've now got 1000 records to process -->
		<batch:step id="partitionedJob.step2"><!--  parent="partitionedJob.calculation.step"> -->
<!-- 			<batch:partition partitioner="partitioner" step="partitionedJob.calculation.step"> -->
<!-- 				<batch:handler grid-size="3" task-executor="partitionTaskExecutor"/> -->
<!-- 			</batch:partition> -->
			<batch:partition handler="messageChannelPartitionHandler" partitioner="partitioner" step="partitionedJob.calculation.step"/>
		</batch:step>
	</batch:job>

	<batch:step id="partitionedJob.calculation.step">
		<batch:tasklet>
			<batch:chunk reader="repositoryReader" processor="processor" writer="jpaWriter" commit-interval="10"/>
		</batch:tasklet>
	</batch:step>
	
	<bean id="reader"
		class="org.springframework.batch.item.database.JpaPagingItemReader" scope="step">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
		<property name="maxItemCount" value="100"/>
		<property name="pageSize" value="10"/>
		<property name="queryString" value="select b from BaseEntity b where b.id between :ida and :idb"/>
		<property name="parameterValues">
			<map>
				<entry key="ida" value="#{stepExecutionContext[paramA]}"/>
				<entry key="idb" value="#{stepExecutionContext[paramB]}"/>
			</map>
		</property>
	</bean>
	
	<bean id="processor"
		class="de.incompleteco.spring.batch.item.CalculationProcessor"/>
	
	<bean id="partitioner"
		class="de.incompleteco.spring.batch.partition.BaseEntityPartitioner"/>

	<bean id="jpaWriter"
		class="de.incompleteco.spring.batch.item.BaseEntityWriter">
	</bean>
	<bean id="repositoryReader"
		class="de.incompleteco.spring.batch.item.BaseEntityReader" scope="step">
		<property name="startId" value="#{stepExecutionContext[paramA]}"/>
		<property name="endId" value="#{stepExecutionContext[paramB]}"/>
	</bean>
	<bean id="messageChannelPartitionHandler"
		class="org.springframework.batch.integration.partition.MessageChannelPartitionHandler">
		<property name="gridSize" value="3"/>
		<property name="stepName" value="partitionedJob.calculation.step"/>
		<property name="messagingOperations">
			<bean class="org.springframework.integration.core.MessagingTemplate">
				<property name="defaultChannel" ref="request.channel"/>
				<property name="receiveTimeout" value="10000"/><!-- 10 seconds -->
			</bean>
		</property>
	</bean>
</beans>
